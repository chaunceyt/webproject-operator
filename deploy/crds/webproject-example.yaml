---
apiVersion: wp.webproject-operator.io/v1alpha1
kind: WebProject
metadata:
  name: developer-cthorn-webproject
  labels:
    app.kubernetes.io/name: webproject
    app.kubernetes.io/instance: developer-cthorn
spec:
  # Project information
  projectName: developer-cthorn
  projectDomainName: developer-cthorn.kube.domain.tld

  deploymentAnnotations:
    "project-lead": "developer-name"
    "project-lead-email": "developer-name@domain.tld"
    "project-language": "lang"
  
  # AWS secret name

  # RELEASE_NAME
  releaseName: developer-cthorn

  # default web image
  # nginx:1.19.4
  # httpd:2.4.46-alpine
  # php:7.4.14-apache-buster
  webContainer:
    image: php:8.0.1-apache-buster
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
    cronJob:
      enabled: true
      schedule: "*/5 * * * *"
      script: |-
        #!/bin/bash
        echo "webcontainer cronjob script"

  # Sidecar Containers

  # cli sidecar image
  cliSidecar:
    enabled: true
    image: outrigger/cli:2-php7.3
    resources:
      requests:
        cpu: 20m
        memory: 100Mi

  # Search sidecar [solr or elasticsearch]
  # solr:8.7.0
  # elasticsearch:7.10.1
  # Drupal elasticsearch setup: composer require drupal/search_api drupal/elasticsearch_connector
  #  https://opensenselabs.com/blog/tech/use-elastic-search-indexing-drupal
  #  config-path: admin/config/search/elasticsearch-connector
  #  serverUrl: SEARCH_HOST (localhost:9200)
  searchSidecar:
    enabled: true
    # Chose an search engine ElasticSearch (es) | Solr 8.x (solr)
    engine: solr
    resources:
      requests:
        cpu: 20m
        memory: 100Mi
    cronJob:
      enabled: true
      schedule: "*/5 * * * *"
      script: |-
        #!/bin/bash
        echo "searchsidecar cronjob script"
        hostname && df -h && date

  # database sidecar image
  # mysql:5.6.51
  # mariadb:10.5.8
  databaseSidecar:
    enabled: true
    databaseName: drupal_db
    databaseImage: mysql:5.6.51
    databaseUser: admin
    databaseUserPassword: admin123
    databaseStorageSize: 2Gi
    databaseRootPassword: rootpasswd123
    databaseStorageMountPath: /var/lib/mysql
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
    cronJob:
      enabled: true
      schedule: "*/5 * * * *"
      script: |-
        #!/bin/bash
        echo "databasesidecar cronjob script"
        hostname && df -h && date
    # Perform backups to aws or gcp bucket
    backup:
      enabled: true
      # aws, gcp
      provider: aws

      # aws: s3://
      # gcp: gs://
      bucket: s3://pahtobucket/dir/path/filename-[releasename]-latest.tar.gz

      # Add the following variable environment to a secret
      # aws
      # AWS_ACCESS_KEY_ID: #
      # AWS_SECRET_ACCESS_KEY: #
      # AWS_REGION: us-east-1
      # gcp
      # GCS_SERVICE_ACCOUNT_JSON_KEY: ?
      # GCS_PROJECT_ID: ?
      backupSecretName: backup-secret
      backupSchedule: "0 * * * *"
      backupScheduledJobsHistorylimit: 10


  # cache sidecar image
  cacheSidecar:
    enabled: true
    # cache engine: memcached or redis
    engine: redis
    redisPassword: "simple"
    resources:
      requests:
        cpu: 100m
        memory: 100Mi

  # file storege size and mountpath
  fileStorageSize: 10Gi
  fileStorageMountPath: /var/www/html/sites/default/files

  # imagepullsecrets config information
  # To create a sercret for a private registry.
  # export REGISTRY_SERVER=
  # export REGISTRY_USER=
  # export REGISTRY_PASS=
  # export REGISTRY_EMAIL=
  # kubectl create secret \
  # docker-registry dockersecret \
  #  --docker-server=$REGISTRY_SERVER \
  #  --docker-username=$REGISTRY_USER \
  #  --docker-password=$REGISTRY_PASS \
  #  --docker-email=$REGISTRY_EMAIL
  imagePullSecrets:
    enabled: true
    secretName: dockersecret

  # Ingress domains
  # 1 to many
  ingressHosts:
    - domainone
    - domaintwo

  # Allow webapp to handle ssl redirects - nginx.ingress.kubernetes.io/ssl-redirect: "false"
  # Add auth - nginx.ingress.kubernetes.io/auth-url: https://auth.domain.com/prod/auth
  # Add signin - nginx.ingress.kubernetes.io/auth-signin: https://auth.domain.com/prod/signin
  # Add support for rewriting of target - "nginx.ingress.kubernetes.io/rewrite-target":    "/$2",
  # Add nginx.ingress.kubernetes.io/auth-tls-verify-client: "off" and nginx.ingress.kubernetes.io/backend-protocol: HTTPS
  # if the project is using custom certs. (i.e. gatsby)
  ingressAnnotations:
    "kubernetes.io/ingress.class": "nginx"
    "nginx.ingress.kubernetes.io/proxy-body-size": "0"
    "nginx.ingress.kubernetes.io/proxy-buffer-size": "16k"
    "nginx.ingress.kubernetes.io/ssl-passthrough": "true"

  # initcontainer script
  initContainerScript: |-
    #!/bin/bash
    # Hello cthorn
    set +x;
    #export $(cat /aws/env | xargs);
    set -x;
    date;
    #aws s3 cp ${AWS_BUCKET}sites/${RELEASE_NAME}.tgz site.tgz;
    date;
    #tar -xzf site.tgz -C /data;
    date;
    #rm -rf site.tgz

  # common configmap
  # required
  commonConfig:
   "BUILD_ID": "1234567890"
   "DOCROOT": "/var/www/docroot"
   "PROJECT_ENV": "project"
   "CI": "true"
   "PHP_MAX_EXECUTION_TIME": "30"
   "DBNAME": "databasename"
   "DBUSER": "databaseuser"
   "PHP_MEMORY_LIMIT": "512M"